@page "/cart"
@inject IJSRuntime JS
@using System.Text.Json
@using System.Collections.Generic
@using System.Linq

<MudContainer>
    <MudText Typo="Typo.h4">Giỏ hàng của bạn</MudText>
    <MudTable Items="cartItems">
        <HeaderContent>
            <MudTh>Hình ảnh</MudTh>
            <MudTh>Sản phẩm</MudTh>
            <MudTh>Giá</MudTh>
            <MudTh>Số lượng</MudTh>
            <MudTh>Tổng cộng</MudTh>
            <MudTh>Thao tác</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <img src="@context.ProductImage" width="50" height="50" alt="@context.ProductName" />
            </MudTd>

            <MudTd>@context.ProductName</MudTd>
            <MudTd>@context.ProductPrice</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="() => UpdateQuantity(context, context.Quantity - 1)" Disabled="IsQuantityLessThanOrEqualToOne(context)" />
                <MudText>@context.Quantity</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => UpdateQuantity(context, context.Quantity + 1)" />
            </MudTd>
            <MudTd>@(context.ProductPrice * context.Quantity)</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveFromCart(context.ProductId)" />
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTd ColSpan="4" Align="Center"><strong>Tổng giá trị</strong></MudTd>
            <MudTd Align="Center"><strong>@GetTotalPrice()</strong></MudTd>
            <MudTd></MudTd>
        </FooterContent>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Checkout">Thanh toán</MudButton>
</MudContainer>

@code {
    [Inject] private IProductManager ProductManager { get; set; }

    private List<CartItem> cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cartItems");
        if (!string.IsNullOrEmpty(cartJson))
        {
            cartItems = JsonSerializer.Deserialize<List<CartItem>>(cartJson);

            // Tải hình ảnh cho từng sản phẩm
            foreach (var item in cartItems)
            {
                await LoadImageAsync(item);
            }
        }
    }

    private bool IsQuantityLessThanOrEqualToOne(CartItem item) => item.Quantity <= 1;

    private async Task UpdateQuantity(CartItem item, int newQuantity)
    {
        item.Quantity = newQuantity;
        await SaveCartToLocalStorage();
    }

    private async Task RemoveFromCart(int productId)
    {
        cartItems = cartItems.Where(i => i.ProductId != productId).ToList();
        await SaveCartToLocalStorage();
    }

    private async Task SaveCartToLocalStorage()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "cartItems", JsonSerializer.Serialize(cartItems));
    }
    private decimal GetTotalPrice()
    {
        return cartItems.Sum(item => item.ProductPrice * item.Quantity);
    }

    private void Checkout()
    {
        // Xử lý logic thanh toán
    }

    private async Task LoadImageAsync(CartItem item)
    {
        var data = await ProductManager.GetProductImageAsync(item.ProductId);
        if (data.Succeeded)
        {
            var imageData = data.Data;
            if (!string.IsNullOrEmpty(imageData))
            {
                item.ProductImage = imageData;
            }
        }
    }

    public class CartItem
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public string ProductImage { get; set; } = string.Empty;
        public int Quantity { get; set; }
    }
}
